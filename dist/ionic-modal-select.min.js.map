{"version":3,"sources":["webpack:///ionic-modal-select.min.js","webpack:///webpack/bootstrap 6cc695979c1e115d9b8a","webpack:///./src/main.js","webpack:///./src/main.js?3479","webpack:///./src/ionic-modal-select.js","webpack:///./src/ionic-modal-select.js?666d","webpack:///./src/modal-template-multiple.html","webpack:///./src/modal-template.html"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","compile","$compile","scope","iElement","iAttrs","x","$watch","$eval","value","html","contents","compileOnce","modalSelect","$ionicModal","$timeout","$filter","$parse","$templateCache","modalTemplateMultiple","modalTemplate","restrict","require","initialOptions","optionGetter","searchFilters","searchProperties","onSelect","onSearch","onReset","onClose","link","ngModelController","transclude","checkSelectedMultipleOptions","multiple","forEach","o","isChecked","setFromProperty","selected","initialOptionsSetup","nv","allOptions","map","item","idx","angular","copy","options","updateListMode","useCollectionRepeat","shortList","length","shortListBreak","ui","parseInt","optionProperty","onOptionSelect","clearSearchOnSelect","multipleNullValue","modalTitle","okButton","hideReset","resetButton","cancelButton","loadListMessage","modalClass","headerFooterClass","selectedClass","itemClass","searchTemplate","hasSearch","searchValue","searchPlaceholder","subHeaderClass","cancelSearchButton","optionsExpression","match","Error","listExpr","listGetter","s","ov","$watchCollection","opt","querySelector","name","message","toString","this","inner","element","Element","prototype","remove","parentNode","removeChild","notFound","$render","$viewValue","getSelectedValue","option","val","undefined","setOption","oldValue","$setViewValue","newValue","modal","hide","then","showList","setFilter","filterId","filter","active","query","unsetValue","isFunction","setValues","checkedItems","v","k","push","oldValues","vals","unsetValues","closeModal","compareValues","a","b","equals","modalTpl","fromTemplate","get","hiddenCb","$on","on","show","whatToSearch","filteredOpts","actual","expected","_typeof","i","toLowerCase","indexOf","oldLen","newOpts","originalItem","find","it","clearSearch","copyOpt","$inject","Symbol","iterator","obj","constructor","directive"],"mappings":"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","file":"ionic-modal-select.min.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\t__webpack_require__(1);\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tcompile.$inject = [\"$compile\"];\n\tmodalSelect.$inject = [\"$ionicModal\", \"$timeout\", \"$filter\", \"$parse\", \"$templateCache\"];\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\t/*!\r\n\t * Copyright 2015 Inmagik SRL.\r\n\t * http://www.inmagik.com/\r\n\t *\r\n\t * ionic-modal-select, v1.3.2\r\n\t * Modal select directive for Ionic framework.\r\n\t *\r\n\t * By @bianchimro\r\n\t *\r\n\t * Licensed under the MIT license. Please see LICENSE for more information.\r\n\t *\r\n\t */\n\t\n\tangular.module('ionic-modal-select', []).directive('compile', compile).directive('modalSelect', modalSelect);\n\t\n\tfunction compile($compile) {\n\t\treturn function (scope, iElement, iAttrs) {\n\t\t\tvar x = scope.$watch(function (scope) {\n\t\t\t\t// watch the 'compile' expression for changes\n\t\t\t\treturn scope.$eval(iAttrs.compile);\n\t\t\t}, function (value) {\n\t\t\t\t// when the 'compile' expression changes\n\t\t\t\t// assign it into the current DOM\n\t\t\t\tiElement.html(value);\n\t\n\t\t\t\t// compile the new DOM and link it to the current\n\t\t\t\t// scope.\n\t\t\t\t// NOTE: we only compile .childNodes so that\n\t\t\t\t// we don't get into infinite loop compiling ourselves\n\t\t\t\t$compile(iElement.contents())(scope);\n\t\n\t\t\t\t//deactivate watch if \"compile-once\" is set to \"true\"\n\t\t\t\tif (iAttrs.compileOnce === 'true') {\n\t\t\t\t\tx();\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\t}\n\t\n\tfunction modalSelect($ionicModal, $timeout, $filter, $parse, $templateCache) {\n\t\n\t\tvar modalTemplateMultiple = __webpack_require__(2);\n\t\tvar modalTemplate = __webpack_require__(3);\n\t\n\t\treturn {\n\t\t\trestrict: 'A',\n\t\t\trequire: 'ngModel',\n\t\t\tscope: {\n\t\t\t\tinitialOptions: \"=options\",\n\t\t\t\toptionGetter: \"&\",\n\t\t\t\tsearchFilters: \"=searchFilters\",\n\t\t\t\tsearchProperties: '=',\n\t\t\t\tonSelect: \"&\",\n\t\t\t\tonSearch: \"&\",\n\t\t\t\tonReset: \"&\",\n\t\t\t\tonClose: \"&\"\n\t\t\t},\n\t\t\tlink: function link(scope, iElement, iAttrs, ngModelController, transclude) {\n\t\n\t\t\t\tvar shortList = true;\n\t\t\t\tvar shortListBreak = iAttrs.shortListBreak ? parseInt(iAttrs.shortListBreak) : 10;\n\t\t\t\tvar setFromProperty = iAttrs.optionProperty;\n\t\t\t\tvar onOptionSelect = iAttrs.optionGetter;\n\t\t\t\tvar clearSearchOnSelect = iAttrs.clearSearchOnSelect !== \"false\" ? true : false;\n\t\t\t\tvar searchProperties = scope.searchProperties ? scope.searchProperties : false;\n\t\n\t\t\t\t//multiple values settings.\n\t\t\t\tvar multiple = iAttrs.multiple ? true : false;\n\t\t\t\tif (multiple) {\n\t\t\t\t\tscope.isChecked = {};\n\t\t\t\t}\n\t\t\t\tvar multipleNullValue = iAttrs.multipleNullValue ? scope.$eval(iAttrs.multipleNullValue) : [];\n\t\n\t\t\t\tfunction checkSelectedMultipleOptions() {\n\t\t\t\t\tif (multiple) {\n\t\t\t\t\t\tscope.initialOptions.forEach(function (o) {\n\t\t\t\t\t\t\tif (typeof scope.isChecked[o[setFromProperty]] === 'undefined' && o.selected) {\n\t\t\t\t\t\t\t\tscope.isChecked[o[setFromProperty]] = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\tscope.ui = {\n\t\t\t\t\tmodalTitle: iAttrs.modalTitle || 'Select an option',\n\t\t\t\t\tokButton: iAttrs.okButton || 'OK',\n\t\t\t\t\thideReset: iAttrs.hideReset !== \"true\" ? false : true,\n\t\t\t\t\tresetButton: iAttrs.resetButton || 'Reset',\n\t\t\t\t\tcancelButton: iAttrs.cancelButton || 'Cancel',\n\t\t\t\t\tloadListMessage: iAttrs.loadListMessage || 'Loading',\n\t\t\t\t\tmodalClass: iAttrs.modalClass || '',\n\t\t\t\t\theaderFooterClass: iAttrs.headerFooterClass || 'bar-stable',\n\t\t\t\t\tvalue: null,\n\t\t\t\t\tselectedClass: iAttrs.selectedClass || 'option-selected',\n\t\t\t\t\titemClass: iAttrs.itemClass || 'item item-text-wrap',\n\t\t\t\t\tsearchTemplate: iAttrs.searchTemplate || (multiple ? modalTemplateMultiple : modalTemplate),\n\t\n\t\t\t\t\t//search stuff\n\t\t\t\t\thasSearch: iAttrs.hasSearch !== \"true\" ? false : true,\n\t\t\t\t\tsearchValue: '',\n\t\t\t\t\tsearchPlaceholder: iAttrs.searchPlaceholder || 'Search',\n\t\t\t\t\tsubHeaderClass: iAttrs.subHeaderClass || 'bar-stable',\n\t\t\t\t\tcancelSearchButton: iAttrs.cancelSearchButton || 'Clear'\n\t\n\t\t\t\t};\n\t\n\t\t\t\tvar allOptions = [];\n\t\t\t\tscope.options = [];\n\t\n\t\t\t\tif (iAttrs.optionsExpression) {\n\t\t\t\t\tvar optionsExpression = iAttrs.optionsExpression;\n\t\t\t\t\tvar match = optionsExpression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tthrow new Error(\"collection-repeat expected expression in form of '_item_ in \" + \"_collection_[ track by _id_]' but got '\" + iAttrs.optionsExpression + \"'.\");\n\t\t\t\t\t}\n\t\t\t\t\t//var keyExpr = match[1];\n\t\t\t\t\tvar listExpr = match[2];\n\t\t\t\t\tvar listGetter = $parse(listExpr);\n\t\t\t\t\tvar s = iElement.scope();\n\t\n\t\t\t\t\tscope.$watch(function () {\n\t\t\t\t\t\treturn listGetter(s);\n\t\t\t\t\t}, function (nv, ov) {\n\t\t\t\t\t\tinitialOptionsSetup(nv);\n\t\t\t\t\t\tupdateListMode();\n\t\t\t\t\t}, true);\n\t\t\t\t} else {\n\t\t\t\t\tscope.$watchCollection('initialOptions', function (nv) {\n\t\t\t\t\t\tinitialOptionsSetup(nv);\n\t\t\t\t\t\tupdateListMode();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\t//#TODO: this is due to different single vs multiple template\n\t\t\t\t//but adds lots of complexity here and in search\n\t\t\t\tfunction initialOptionsSetup(nv) {\n\t\t\t\t\tnv = nv || [];\n\t\t\t\t\tif (!multiple) {\n\t\t\t\t\t\tallOptions = angular.copy(nv);\n\t\t\t\t\t\tscope.options = angular.copy(nv);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tallOptions = nv.map(function (item, idx) {\n\t\t\t\t\t\t\treturn [idx, angular.copy(item)];\n\t\t\t\t\t\t});\n\t\t\t\t\t\tscope.options = angular.copy(allOptions);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\n\t\t\t\t// getting options template\n\t\t\t\tvar opt = iElement[0].querySelector('.option');\n\t\t\t\tif (!opt) {\n\t\t\t\t\tthrow new Error({\n\t\t\t\t\t\tname: 'modalSelectError:noOptionTemplate',\n\t\t\t\t\t\tmessage: 'When using modalSelect directive you must include an element with class \"option\"\\n\\t\\t\\t\\t\\t\\t to provide a template for your select options.',\n\t\t\t\t\t\ttoString: function toString() {\n\t\t\t\t\t\t\treturn this.name + \" \" + this.message;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tscope.inner = angular.element(opt).html();\n\t\n\t\t\t\t//add support for .remove for older devices\n\t\t\t\tif (!('remove' in Element.prototype)) {\n\t\t\t\t\tElement.prototype.remove = function () {\n\t\t\t\t\t\tthis.parentNode.removeChild(this);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\n\t\t\t\tangular.element(opt).remove();\n\t\n\t\t\t\tvar notFound = iElement[0].querySelector('.not-found');\n\t\t\t\tif (notFound) {\n\t\t\t\t\tscope.notFound = angular.element(notFound).html();\n\t\t\t\t\tangular.element(notFound).remove();\n\t\t\t\t}\n\t\n\t\t\t\tfunction updateListMode() {\n\t\t\t\t\t//shortList controls wether using ng-repeat instead of collection-repeat\n\t\t\t\t\tif (iAttrs.useCollectionRepeat === \"true\") {\n\t\t\t\t\t\tshortList = false;\n\t\t\t\t\t} else if (iAttrs.useCollectionRepeat === \"false\") {\n\t\t\t\t\t\tshortList = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (typeof scope.options !== \"undefined\") {\n\t\t\t\t\t\t\tshortList = !!(scope.options.length < shortListBreak);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\tscope.ui.shortList = shortList;\n\t\t\t\t}\n\t\n\t\t\t\tngModelController.$render = function () {\n\t\t\t\t\tscope.ui.value = ngModelController.$viewValue;\n\t\t\t\t};\n\t\n\t\t\t\tvar getSelectedValue = scope.getSelectedValue = function (option) {\n\t\t\t\t\tvar val = null;\n\t\t\t\t\tif (option === null || option === undefined) {\n\t\t\t\t\t\treturn option;\n\t\t\t\t\t}\n\t\t\t\t\tif (onOptionSelect) {\n\t\t\t\t\t\treturn scope.optionGetter({ option: option });\n\t\t\t\t\t}\n\t\t\t\t\tif (setFromProperty) {\n\t\t\t\t\t\tval = option[setFromProperty];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tval = option;\n\t\t\t\t\t}\n\t\t\t\t\treturn val;\n\t\t\t\t};\n\t\n\t\t\t\tscope.setOption = function (option) {\n\t\t\t\t\tvar oldValue = ngModelController.$viewValue;\n\t\t\t\t\tvar val = getSelectedValue(option);\n\t\t\t\t\tngModelController.$setViewValue(val);\n\t\t\t\t\tngModelController.$render();\n\t\n\t\t\t\t\tif (scope.onSelect) {\n\t\t\t\t\t\tscope.onSelect({ newValue: val, oldValue: oldValue });\n\t\t\t\t\t}\n\t\t\t\t\tscope.modal.hide().then(function () {\n\t\t\t\t\t\tscope.showList = false;\n\t\t\t\t\t\tif (scope.ui.hasSearch) {\n\t\t\t\t\t\t\tif (clearSearchOnSelect) {\n\t\t\t\t\t\t\t\tscope.ui.searchValue = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\n\t\t\t\t// Filter object {id: <filterId>, active: <boolean>}\n\t\t\t\t// Used as auxiliary query params when querying server for search results\n\t\t\t\tscope.setFilter = function (filterId) {\n\t\t\t\t\tangular.forEach(scope.searchFilters, function (filter) {\n\t\t\t\t\t\tif (filter.id == filterId) {\n\t\t\t\t\t\t\tfilter.active = !filter.active;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfilter.active = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\n\t\t\t\t\t// Trigger another search when the search filters change\n\t\t\t\t\tif (scope.onSearch) {\n\t\t\t\t\t\tscope.onSearch({ query: scope.ui.searchValue });\n\t\t\t\t\t}\n\t\t\t\t};\n\t\n\t\t\t\tscope.unsetValue = function () {\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\tngModelController.$setViewValue(\"\");\n\t\t\t\t\t\tngModelController.$render();\n\t\t\t\t\t\tscope.modal.hide();\n\t\t\t\t\t\tscope.showList = false;\n\t\t\t\t\t\tif (scope.onReset && angular.isFunction(scope.onReset)) {\n\t\t\t\t\t\t\tscope.onReset();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\n\t\t\t\tscope.setValues = function () {\n\t\t\t\t\tvar checkedItems = [];\n\t\t\t\t\tangular.forEach(scope.isChecked, function (v, k) {\n\t\t\t\t\t\tif (v) {\n\t\t\t\t\t\t\tcheckedItems.push(allOptions[k][1]);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tvar oldValues = ngModelController.$viewValue;\n\t\t\t\t\tvar vals = checkedItems.map(function (item) {\n\t\t\t\t\t\treturn getSelectedValue(item);\n\t\t\t\t\t});\n\t\t\t\t\tngModelController.$setViewValue(vals);\n\t\t\t\t\tngModelController.$render();\n\t\n\t\t\t\t\tif (scope.onSelect) {\n\t\t\t\t\t\tscope.onSelect({ newValue: vals, oldValue: oldValues });\n\t\t\t\t\t}\n\t\t\t\t\tscope.modal.hide().then(function () {\n\t\t\t\t\t\tscope.showList = false;\n\t\t\t\t\t\tif (scope.ui.hasSearch) {\n\t\t\t\t\t\t\tif (clearSearchOnSelect) {\n\t\t\t\t\t\t\t\tscope.ui.searchValue = '';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\n\t\t\t\tscope.unsetValues = function () {\n\t\t\t\t\t$timeout(function () {\n\t\t\t\t\t\tngModelController.$setViewValue(multipleNullValue);\n\t\t\t\t\t\tngModelController.$render();\n\t\t\t\t\t\tscope.isChecked = {};\n\t\t\t\t\t\tscope.modal.hide();\n\t\t\t\t\t\tscope.showList = false;\n\t\t\t\t\t\tif (scope.onReset && angular.isFunction(scope.onReset)) {\n\t\t\t\t\t\t\tscope.onReset();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\n\t\t\t\tscope.closeModal = function () {\n\t\t\t\t\tscope.modal.hide().then(function () {\n\t\t\t\t\t\tscope.showList = false;\n\t\t\t\t\t});\n\t\t\t\t};\n\t\n\t\t\t\tscope.compareValues = function (a, b) {\n\t\t\t\t\treturn angular.equals(a, b);\n\t\t\t\t};\n\t\n\t\t\t\t//loading the modal\n\t\t\t\tvar modalTpl = null;\n\t\t\t\tif (iAttrs.searchTemplate) {\n\t\t\t\t\tscope.modal = $ionicModal.fromTemplate($templateCache.get(iAttrs.searchTemplate), { scope: scope });\n\t\t\t\t} else {\n\t\t\t\t\tmodalTpl = multiple ? modalTemplateMultiple : modalTemplate;\n\t\t\t\t\tscope.modal = $ionicModal.fromTemplate(modalTpl, { scope: scope });\n\t\t\t\t}\n\t\n\t\t\t\tvar hiddenCb = null;\n\t\t\t\tscope.$on('$destroy', function () {\n\t\t\t\t\tif (hiddenCb) {\n\t\t\t\t\t\thiddenCb();\n\t\t\t\t\t\thiddenCb = null;\n\t\t\t\t\t}\n\t\t\t\t\tscope.modal.remove();\n\t\t\t\t});\n\t\n\t\t\t\tif (scope.onClose && angular.isFunction(scope.onClose)) {\n\t\t\t\t\thiddenCb = scope.$on('modal.hidden', function () {\n\t\t\t\t\t\tscope.onClose();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\n\t\t\t\tiElement.on('click', function () {\n\t\t\t\t\tif (shortList) {\n\t\t\t\t\t\tscope.showList = true;\n\t\t\t\t\t\tscope.modal.show();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tscope.modal.show().then(function () {\n\t\t\t\t\t\t\tscope.showList = true;\n\t\t\t\t\t\t\tscope.ui.shortList = shortList;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tcheckSelectedMultipleOptions();\n\t\t\t\t});\n\t\n\t\t\t\t//filter function\n\t\t\t\tif (scope.ui.hasSearch) {\n\t\t\t\t\tscope.$watch('ui.searchValue', function (nv) {\n\t\t\t\t\t\tvar whatToSearch;\n\t\t\t\t\t\tif (!multiple) {\n\t\t\t\t\t\t\twhatToSearch = allOptions;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twhatToSearch = allOptions.map(function (item) {\n\t\t\t\t\t\t\t\treturn item[1];\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\tif (iAttrs.onSearch) {\n\t\t\t\t\t\t\tscope.onSearch({ query: nv });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar filteredOpts = $filter('filter')(whatToSearch, nv, function (actual, expected) {\n\t\t\t\t\t\t\t\tif (!actual) {\n\t\t\t\t\t\t\t\t\t// if actual is an empty string, empty object, null, or undefined\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (searchProperties) {\n\t\t\t\t\t\t\t\t\tif ((typeof actual === 'undefined' ? 'undefined' : _typeof(actual)) == 'object') {\n\t\t\t\t\t\t\t\t\t\tfor (var i = 0; i < searchProperties.length; i++) {\n\t\t\t\t\t\t\t\t\t\t\tif (actual[searchProperties[i]] && actual[searchProperties[i]].toLowerCase().indexOf(expected.toLowerCase()) >= 0) {\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tif (actual.toString().toLowerCase().indexOf(expected.toLowerCase()) >= 0) {\n\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t});\n\t\n\t\t\t\t\t\t\tvar oldLen = scope.options.length;\n\t\t\t\t\t\t\tif (!multiple) {\n\t\t\t\t\t\t\t\tscope.options = filteredOpts;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t//#TODO: lots of loops here!\n\t\t\t\t\t\t\t\tvar newOpts = [];\n\t\t\t\t\t\t\t\tangular.forEach(filteredOpts, function (item) {\n\t\t\t\t\t\t\t\t\tvar originalItem = allOptions.find(function (it) {\n\t\t\t\t\t\t\t\t\t\treturn it[1] == item;\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\tif (originalItem) {\n\t\t\t\t\t\t\t\t\t\tnewOpts.push(originalItem);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tscope.options = newOpts;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (oldLen != scope.options.length) {\n\t\t\t\t\t\t\t\t//#todo: should resize scroll or scroll up here\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tscope.clearSearch = function () {\n\t\t\t\t\t\tscope.ui.searchValue = '';\n\t\t\t\t\t};\n\t\t\t\t}\n\t\n\t\t\t\tscope.copyOpt = function (option) {\n\t\t\t\t\treturn angular.copy(option);\n\t\t\t\t};\n\t\n\t\t\t\t//#TODO ?: WRAP INTO $timeout?\n\t\t\t\tngModelController.$render();\n\t\t\t}\n\t\t};\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <ion-modal-view class=\\\"ionic-select-modal\\\" ng-class=\\\"::ui.modalClass\\\">\\r\\n\\r\\n    <ion-header-bar ng-class=\\\"::ui.headerFooterClass\\\">\\r\\n      <h1 class=\\\"title\\\">{{::ui.modalTitle}}</h1>\\r\\n    </ion-header-bar>\\r\\n\\r\\n    <div class=\\\"bar bar-subheader item-input-inset\\\" ng-class=\\\"::ui.subHeaderClass\\\" ng-if=\\\"ui.hasSearch\\\">\\r\\n      <label class=\\\"item-input-wrapper\\\">\\r\\n        <i class=\\\"icon ion-ios-search placeholder-icon\\\"></i>\\r\\n        <input type=\\\"search\\\" placeholder=\\\"{{::ui.searchPlaceholder}}\\\" ng-model=\\\"ui.searchValue\\\">\\r\\n      </label>\\r\\n      <button type=\\\"button\\\" class=\\\"button button-clear\\\" ng-click=\\\"clearSearch()\\\">\\r\\n        {{ ui.cancelSearchButton }}\\r\\n      </button>\\r\\n    </div>\\r\\n\\r\\n    <ion-content class=\\\"has-header\\\" ng-class=\\\"{'has-subheader':ui.hasSearch}\\\">\\r\\n    <div class=\\\"text-center\\\" ng-if=\\\"!ui.shortList && !showList\\\" style=\\\"padding-top:40px;\\\">\\r\\n        <h4 class=\\\"muted\\\">{{::ui.loadListMessage}}</h4>\\r\\n        <p>\\r\\n            <ion-spinner></ion-spinner>\\r\\n        </p>\\r\\n    </div>\\r\\n\\r\\n    <div ng-if=\\\"showList\\\">\\r\\n        <!--collection-repeat mode -->\\r\\n        <!-- not working right now -->\\r\\n        <!--\\r\\n        <div ng-if=\\\"!ui.shortList\\\" >\\r\\n            <div class=\\\"list\\\" class=\\\"animate-if\\\" >\\r\\n                <div\\r\\n                    class=\\\"item item-checkbox\\\" ng-class=\\\"ui.itemClass\\\"\\r\\n                     collection-repeat=\\\"optionm in options track by $index\\\">\\r\\n                    <label class=\\\"checkbox\\\">\\r\\n                        <input type=\\\"checkbox\\\" ng-model=\\\"isChecked[optionm[0]]\\\">\\r\\n                    </label>\\r\\n\\r\\n                    <div compile=\\\"inner\\\" ng-init=\\\"option=optionm[1]\\\" compile-once=\\\"false\\\"></div>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        -->\\r\\n\\r\\n        <!-- ng-repeat mode -->\\r\\n        <div ng-if=\\\"ui.shortList || true\\\">\\r\\n            <div class=\\\"list\\\">\\r\\n                <div\\r\\n                  class=\\\"item item-checkbox\\\" ng-class=\\\"ui.itemClass\\\"\\r\\n                  ng-repeat=\\\"optionm in options track by optionm[0]\\\">\\r\\n                    <label class=\\\"checkbox\\\">\\r\\n                        <input type=\\\"checkbox\\\" ng-model=\\\"isChecked[optionm[0]]\\\">\\r\\n                    </label>\\r\\n                    <div ng-init=\\\"option=optionm[1]\\\" compile=\\\"inner\\\" compile-once=\\\"true\\\"></div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    </ion-content>\\r\\n    <ion-footer-bar ng-class=\\\"::ui.headerFooterClass\\\">\\r\\n        <button class=\\\"button button-stable\\\" ng-click=\\\"closeModal()\\\">{{ui.cancelButton}}</button>\\r\\n        <div class=\\\"title\\\" style=\\\"padding-top:6px\\\">\\r\\n            <button class=\\\"button button-navbar\\\" ng-click=\\\"setValues()\\\">OK</button>\\r\\n        </div>\\r\\n        <button ng-if=\\\"::!ui.hideReset\\\" class=\\\"button button-stable\\\" ng-click=\\\"unsetValues()\\\">{{ui.resetButton}}</button>\\r\\n    </ion-footer-bar>\\r\\n</ion-modal-view>\\r\\n\"\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\tmodule.exports = \" <ion-modal-view class=\\\"ionic-select-modal\\\" ng-class=\\\"::ui.modalClass\\\">\\r\\n\\r\\n    <ion-header-bar ng-class=\\\"::ui.headerFooterClass\\\">\\r\\n      <h1 class=\\\"title\\\">{{::ui.modalTitle}}</h1>\\r\\n    </ion-header-bar>\\r\\n\\r\\n    <div class=\\\"bar bar-subheader item-input-inset\\\" ng-class=\\\"::ui.subHeaderClass\\\" ng-if=\\\"ui.hasSearch\\\">\\r\\n      <label class=\\\"item-input-wrapper\\\">\\r\\n        <i class=\\\"icon ion-ios-search placeholder-icon\\\"></i>\\r\\n        <input type=\\\"search\\\" placeholder=\\\"{{::ui.searchPlaceholder}}\\\" ng-model=\\\"ui.searchValue\\\">\\r\\n      </label>\\r\\n      <button type=\\\"button\\\" class=\\\"button button-clear\\\" ng-click=\\\"clearSearch()\\\">\\r\\n        {{ ui.cancelSearchButton }}\\r\\n      </button>\\r\\n    </div>\\r\\n\\r\\n    <ion-content class=\\\"has-header\\\" ng-class=\\\"{'has-subheader':ui.hasSearch}\\\">\\r\\n        <div class=\\\"text-center\\\" ng-if=\\\"!ui.shortList && !showList\\\" style=\\\"padding-top:40px;\\\">\\r\\n            <h4 class=\\\"muted\\\">{{::ui.loadListMessage}}</h4>\\r\\n            <p>\\r\\n                <ion-spinner></ion-spinner>\\r\\n            </p>\\r\\n        </div>\\r\\n        <div ng-if=\\\"showList\\\">\\r\\n            <div ng-if=\\\"!ui.shortList\\\">\\r\\n                <div class=\\\"list\\\" ng-if=\\\"showList\\\" class=\\\"animate-if\\\">\\r\\n                    <div\\r\\n                      ng-class=\\\"{ '{{::ui.itemClass}}' : true, '{{::ui.selectedClass}}': compareValues(getSelectedValue(option), ui.value) }\\\"\\r\\n                      collection-repeat=\\\"option in options track by $index\\\"\\r\\n                      ng-click=\\\"setOption(option)\\\"\\r\\n                      ng-class=\\\"{'{{::ui.selectedClass}}': compareValues(getSelectedValue(option), ui.value) }\\\">\\r\\n                        <div compile=\\\"inner\\\" compile-once=\\\"true\\\"></div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div ng-if=\\\"ui.shortList\\\">\\r\\n                <div class=\\\"list\\\">\\r\\n                    <div\\r\\n                      ng-repeat=\\\"option in options track by $index\\\"\\r\\n                      ng-click=\\\"setOption(option)\\\"\\r\\n                      ng-class=\\\"{ '{{::ui.itemClass}}' : true, '{{::ui.selectedClass}}': compareValues(getSelectedValue(option), ui.value) }\\\">\\r\\n                        <div compile=\\\"inner\\\" compile-once=\\\"true\\\"></div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div ng-if=\\\"notFound && options.length == 0\\\">\\r\\n            <div compile=\\\"notFound\\\" compile-once=\\\"true\\\" ng-click=\\\"closeModal()\\\"></div>\\r\\n        </div>\\r\\n\\r\\n    </ion-content>\\r\\n\\r\\n    <ion-footer-bar ng-class=\\\"::ui.headerFooterClass\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"button button-stable modal-select-close-button\\\" ng-click=\\\"closeModal()\\\">{{ui.cancelButton}}</button>\\r\\n        <button type=\\\"button\\\" ng-if=\\\"::!ui.hideReset\\\" class=\\\"button button-stable\\\" ng-click=\\\"unsetValue()\\\">{{ui.resetButton}}</button>\\r\\n    </ion-footer-bar>\\r\\n\\r\\n</ion-modal-view>\\r\\n\"\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// ionic-modal-select.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6cc695979c1e115d9b8a","\"use strict\";\n\nrequire(\"./ionic-modal-select.js\");\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","import \"./ionic-modal-select.js\";\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/main.js","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/*!\r\n * Copyright 2015 Inmagik SRL.\r\n * http://www.inmagik.com/\r\n *\r\n * ionic-modal-select, v1.3.2\r\n * Modal select directive for Ionic framework.\r\n *\r\n * By @bianchimro\r\n *\r\n * Licensed under the MIT license. Please see LICENSE for more information.\r\n *\r\n */\n\nangular.module('ionic-modal-select', []).directive('compile', compile).directive('modalSelect', modalSelect);\n\nfunction compile($compile) {\n\treturn function (scope, iElement, iAttrs) {\n\t\tvar x = scope.$watch(function (scope) {\n\t\t\t// watch the 'compile' expression for changes\n\t\t\treturn scope.$eval(iAttrs.compile);\n\t\t}, function (value) {\n\t\t\t// when the 'compile' expression changes\n\t\t\t// assign it into the current DOM\n\t\t\tiElement.html(value);\n\n\t\t\t// compile the new DOM and link it to the current\n\t\t\t// scope.\n\t\t\t// NOTE: we only compile .childNodes so that\n\t\t\t// we don't get into infinite loop compiling ourselves\n\t\t\t$compile(iElement.contents())(scope);\n\n\t\t\t//deactivate watch if \"compile-once\" is set to \"true\"\n\t\t\tif (iAttrs.compileOnce === 'true') {\n\t\t\t\tx();\n\t\t\t}\n\t\t});\n\t};\n}\n\nfunction modalSelect($ionicModal, $timeout, $filter, $parse, $templateCache) {\n\n\tvar modalTemplateMultiple = require('raw!./modal-template-multiple.html');\n\tvar modalTemplate = require('raw!./modal-template.html');\n\n\treturn {\n\t\trestrict: 'A',\n\t\trequire: 'ngModel',\n\t\tscope: {\n\t\t\tinitialOptions: \"=options\",\n\t\t\toptionGetter: \"&\",\n\t\t\tsearchFilters: \"=searchFilters\",\n\t\t\tsearchProperties: '=',\n\t\t\tonSelect: \"&\",\n\t\t\tonSearch: \"&\",\n\t\t\tonReset: \"&\",\n\t\t\tonClose: \"&\"\n\t\t},\n\t\tlink: function link(scope, iElement, iAttrs, ngModelController, transclude) {\n\n\t\t\tvar shortList = true;\n\t\t\tvar shortListBreak = iAttrs.shortListBreak ? parseInt(iAttrs.shortListBreak) : 10;\n\t\t\tvar setFromProperty = iAttrs.optionProperty;\n\t\t\tvar onOptionSelect = iAttrs.optionGetter;\n\t\t\tvar clearSearchOnSelect = iAttrs.clearSearchOnSelect !== \"false\" ? true : false;\n\t\t\tvar searchProperties = scope.searchProperties ? scope.searchProperties : false;\n\n\t\t\t//multiple values settings.\n\t\t\tvar multiple = iAttrs.multiple ? true : false;\n\t\t\tif (multiple) {\n\t\t\t\tscope.isChecked = {};\n\t\t\t}\n\t\t\tvar multipleNullValue = iAttrs.multipleNullValue ? scope.$eval(iAttrs.multipleNullValue) : [];\n\n\t\t\tfunction checkSelectedMultipleOptions() {\n\t\t\t\tif (multiple) {\n\t\t\t\t\tscope.initialOptions.forEach(function (o) {\n\t\t\t\t\t\tif (typeof scope.isChecked[o[setFromProperty]] === 'undefined' && o.selected) {\n\t\t\t\t\t\t\tscope.isChecked[o[setFromProperty]] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tscope.ui = {\n\t\t\t\tmodalTitle: iAttrs.modalTitle || 'Select an option',\n\t\t\t\tokButton: iAttrs.okButton || 'OK',\n\t\t\t\thideReset: iAttrs.hideReset !== \"true\" ? false : true,\n\t\t\t\tresetButton: iAttrs.resetButton || 'Reset',\n\t\t\t\tcancelButton: iAttrs.cancelButton || 'Cancel',\n\t\t\t\tloadListMessage: iAttrs.loadListMessage || 'Loading',\n\t\t\t\tmodalClass: iAttrs.modalClass || '',\n\t\t\t\theaderFooterClass: iAttrs.headerFooterClass || 'bar-stable',\n\t\t\t\tvalue: null,\n\t\t\t\tselectedClass: iAttrs.selectedClass || 'option-selected',\n\t\t\t\titemClass: iAttrs.itemClass || 'item item-text-wrap',\n\t\t\t\tsearchTemplate: iAttrs.searchTemplate || (multiple ? modalTemplateMultiple : modalTemplate),\n\n\t\t\t\t//search stuff\n\t\t\t\thasSearch: iAttrs.hasSearch !== \"true\" ? false : true,\n\t\t\t\tsearchValue: '',\n\t\t\t\tsearchPlaceholder: iAttrs.searchPlaceholder || 'Search',\n\t\t\t\tsubHeaderClass: iAttrs.subHeaderClass || 'bar-stable',\n\t\t\t\tcancelSearchButton: iAttrs.cancelSearchButton || 'Clear'\n\n\t\t\t};\n\n\t\t\tvar allOptions = [];\n\t\t\tscope.options = [];\n\n\t\t\tif (iAttrs.optionsExpression) {\n\t\t\t\tvar optionsExpression = iAttrs.optionsExpression;\n\t\t\t\tvar match = optionsExpression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\n\t\t\t\tif (!match) {\n\t\t\t\t\tthrow new Error(\"collection-repeat expected expression in form of '_item_ in \" + \"_collection_[ track by _id_]' but got '\" + iAttrs.optionsExpression + \"'.\");\n\t\t\t\t}\n\t\t\t\t//var keyExpr = match[1];\n\t\t\t\tvar listExpr = match[2];\n\t\t\t\tvar listGetter = $parse(listExpr);\n\t\t\t\tvar s = iElement.scope();\n\n\t\t\t\tscope.$watch(function () {\n\t\t\t\t\treturn listGetter(s);\n\t\t\t\t}, function (nv, ov) {\n\t\t\t\t\tinitialOptionsSetup(nv);\n\t\t\t\t\tupdateListMode();\n\t\t\t\t}, true);\n\t\t\t} else {\n\t\t\t\tscope.$watchCollection('initialOptions', function (nv) {\n\t\t\t\t\tinitialOptionsSetup(nv);\n\t\t\t\t\tupdateListMode();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t//#TODO: this is due to different single vs multiple template\n\t\t\t//but adds lots of complexity here and in search\n\t\t\tfunction initialOptionsSetup(nv) {\n\t\t\t\tnv = nv || [];\n\t\t\t\tif (!multiple) {\n\t\t\t\t\tallOptions = angular.copy(nv);\n\t\t\t\t\tscope.options = angular.copy(nv);\n\t\t\t\t} else {\n\t\t\t\t\tallOptions = nv.map(function (item, idx) {\n\t\t\t\t\t\treturn [idx, angular.copy(item)];\n\t\t\t\t\t});\n\t\t\t\t\tscope.options = angular.copy(allOptions);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// getting options template\n\t\t\tvar opt = iElement[0].querySelector('.option');\n\t\t\tif (!opt) {\n\t\t\t\tthrow new Error({\n\t\t\t\t\tname: 'modalSelectError:noOptionTemplate',\n\t\t\t\t\tmessage: 'When using modalSelect directive you must include an element with class \"option\"\\n\\t\\t\\t\\t\\t\\t to provide a template for your select options.',\n\t\t\t\t\ttoString: function toString() {\n\t\t\t\t\t\treturn this.name + \" \" + this.message;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tscope.inner = angular.element(opt).html();\n\n\t\t\t//add support for .remove for older devices\n\t\t\tif (!('remove' in Element.prototype)) {\n\t\t\t\tElement.prototype.remove = function () {\n\t\t\t\t\tthis.parentNode.removeChild(this);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tangular.element(opt).remove();\n\n\t\t\tvar notFound = iElement[0].querySelector('.not-found');\n\t\t\tif (notFound) {\n\t\t\t\tscope.notFound = angular.element(notFound).html();\n\t\t\t\tangular.element(notFound).remove();\n\t\t\t}\n\n\t\t\tfunction updateListMode() {\n\t\t\t\t//shortList controls wether using ng-repeat instead of collection-repeat\n\t\t\t\tif (iAttrs.useCollectionRepeat === \"true\") {\n\t\t\t\t\tshortList = false;\n\t\t\t\t} else if (iAttrs.useCollectionRepeat === \"false\") {\n\t\t\t\t\tshortList = true;\n\t\t\t\t} else {\n\t\t\t\t\tif (typeof scope.options !== \"undefined\") {\n\t\t\t\t\t\tshortList = !!(scope.options.length < shortListBreak);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tscope.ui.shortList = shortList;\n\t\t\t}\n\n\t\t\tngModelController.$render = function () {\n\t\t\t\tscope.ui.value = ngModelController.$viewValue;\n\t\t\t};\n\n\t\t\tvar getSelectedValue = scope.getSelectedValue = function (option) {\n\t\t\t\tvar val = null;\n\t\t\t\tif (option === null || option === undefined) {\n\t\t\t\t\treturn option;\n\t\t\t\t}\n\t\t\t\tif (onOptionSelect) {\n\t\t\t\t\treturn scope.optionGetter({ option: option });\n\t\t\t\t}\n\t\t\t\tif (setFromProperty) {\n\t\t\t\t\tval = option[setFromProperty];\n\t\t\t\t} else {\n\t\t\t\t\tval = option;\n\t\t\t\t}\n\t\t\t\treturn val;\n\t\t\t};\n\n\t\t\tscope.setOption = function (option) {\n\t\t\t\tvar oldValue = ngModelController.$viewValue;\n\t\t\t\tvar val = getSelectedValue(option);\n\t\t\t\tngModelController.$setViewValue(val);\n\t\t\t\tngModelController.$render();\n\n\t\t\t\tif (scope.onSelect) {\n\t\t\t\t\tscope.onSelect({ newValue: val, oldValue: oldValue });\n\t\t\t\t}\n\t\t\t\tscope.modal.hide().then(function () {\n\t\t\t\t\tscope.showList = false;\n\t\t\t\t\tif (scope.ui.hasSearch) {\n\t\t\t\t\t\tif (clearSearchOnSelect) {\n\t\t\t\t\t\t\tscope.ui.searchValue = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\t// Filter object {id: <filterId>, active: <boolean>}\n\t\t\t// Used as auxiliary query params when querying server for search results\n\t\t\tscope.setFilter = function (filterId) {\n\t\t\t\tangular.forEach(scope.searchFilters, function (filter) {\n\t\t\t\t\tif (filter.id == filterId) {\n\t\t\t\t\t\tfilter.active = !filter.active;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfilter.active = false;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// Trigger another search when the search filters change\n\t\t\t\tif (scope.onSearch) {\n\t\t\t\t\tscope.onSearch({ query: scope.ui.searchValue });\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tscope.unsetValue = function () {\n\t\t\t\t$timeout(function () {\n\t\t\t\t\tngModelController.$setViewValue(\"\");\n\t\t\t\t\tngModelController.$render();\n\t\t\t\t\tscope.modal.hide();\n\t\t\t\t\tscope.showList = false;\n\t\t\t\t\tif (scope.onReset && angular.isFunction(scope.onReset)) {\n\t\t\t\t\t\tscope.onReset();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tscope.setValues = function () {\n\t\t\t\tvar checkedItems = [];\n\t\t\t\tangular.forEach(scope.isChecked, function (v, k) {\n\t\t\t\t\tif (v) {\n\t\t\t\t\t\tcheckedItems.push(allOptions[k][1]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tvar oldValues = ngModelController.$viewValue;\n\t\t\t\tvar vals = checkedItems.map(function (item) {\n\t\t\t\t\treturn getSelectedValue(item);\n\t\t\t\t});\n\t\t\t\tngModelController.$setViewValue(vals);\n\t\t\t\tngModelController.$render();\n\n\t\t\t\tif (scope.onSelect) {\n\t\t\t\t\tscope.onSelect({ newValue: vals, oldValue: oldValues });\n\t\t\t\t}\n\t\t\t\tscope.modal.hide().then(function () {\n\t\t\t\t\tscope.showList = false;\n\t\t\t\t\tif (scope.ui.hasSearch) {\n\t\t\t\t\t\tif (clearSearchOnSelect) {\n\t\t\t\t\t\t\tscope.ui.searchValue = '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tscope.unsetValues = function () {\n\t\t\t\t$timeout(function () {\n\t\t\t\t\tngModelController.$setViewValue(multipleNullValue);\n\t\t\t\t\tngModelController.$render();\n\t\t\t\t\tscope.isChecked = {};\n\t\t\t\t\tscope.modal.hide();\n\t\t\t\t\tscope.showList = false;\n\t\t\t\t\tif (scope.onReset && angular.isFunction(scope.onReset)) {\n\t\t\t\t\t\tscope.onReset();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tscope.closeModal = function () {\n\t\t\t\tscope.modal.hide().then(function () {\n\t\t\t\t\tscope.showList = false;\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tscope.compareValues = function (a, b) {\n\t\t\t\treturn angular.equals(a, b);\n\t\t\t};\n\n\t\t\t//loading the modal\n\t\t\tvar modalTpl = null;\n\t\t\tif (iAttrs.searchTemplate) {\n\t\t\t\tscope.modal = $ionicModal.fromTemplate($templateCache.get(iAttrs.searchTemplate), { scope: scope });\n\t\t\t} else {\n\t\t\t\tmodalTpl = multiple ? modalTemplateMultiple : modalTemplate;\n\t\t\t\tscope.modal = $ionicModal.fromTemplate(modalTpl, { scope: scope });\n\t\t\t}\n\n\t\t\tvar hiddenCb = null;\n\t\t\tscope.$on('$destroy', function () {\n\t\t\t\tif (hiddenCb) {\n\t\t\t\t\thiddenCb();\n\t\t\t\t\thiddenCb = null;\n\t\t\t\t}\n\t\t\t\tscope.modal.remove();\n\t\t\t});\n\n\t\t\tif (scope.onClose && angular.isFunction(scope.onClose)) {\n\t\t\t\thiddenCb = scope.$on('modal.hidden', function () {\n\t\t\t\t\tscope.onClose();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tiElement.on('click', function () {\n\t\t\t\tif (shortList) {\n\t\t\t\t\tscope.showList = true;\n\t\t\t\t\tscope.modal.show();\n\t\t\t\t} else {\n\t\t\t\t\tscope.modal.show().then(function () {\n\t\t\t\t\t\tscope.showList = true;\n\t\t\t\t\t\tscope.ui.shortList = shortList;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcheckSelectedMultipleOptions();\n\t\t\t});\n\n\t\t\t//filter function\n\t\t\tif (scope.ui.hasSearch) {\n\t\t\t\tscope.$watch('ui.searchValue', function (nv) {\n\t\t\t\t\tvar whatToSearch;\n\t\t\t\t\tif (!multiple) {\n\t\t\t\t\t\twhatToSearch = allOptions;\n\t\t\t\t\t} else {\n\t\t\t\t\t\twhatToSearch = allOptions.map(function (item) {\n\t\t\t\t\t\t\treturn item[1];\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (iAttrs.onSearch) {\n\t\t\t\t\t\tscope.onSearch({ query: nv });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar filteredOpts = $filter('filter')(whatToSearch, nv, function (actual, expected) {\n\t\t\t\t\t\t\tif (!actual) {\n\t\t\t\t\t\t\t\t// if actual is an empty string, empty object, null, or undefined\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (searchProperties) {\n\t\t\t\t\t\t\t\tif ((typeof actual === 'undefined' ? 'undefined' : _typeof(actual)) == 'object') {\n\t\t\t\t\t\t\t\t\tfor (var i = 0; i < searchProperties.length; i++) {\n\t\t\t\t\t\t\t\t\t\tif (actual[searchProperties[i]] && actual[searchProperties[i]].toLowerCase().indexOf(expected.toLowerCase()) >= 0) {\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (actual.toString().toLowerCase().indexOf(expected.toLowerCase()) >= 0) {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tvar oldLen = scope.options.length;\n\t\t\t\t\t\tif (!multiple) {\n\t\t\t\t\t\t\tscope.options = filteredOpts;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t//#TODO: lots of loops here!\n\t\t\t\t\t\t\tvar newOpts = [];\n\t\t\t\t\t\t\tangular.forEach(filteredOpts, function (item) {\n\t\t\t\t\t\t\t\tvar originalItem = allOptions.find(function (it) {\n\t\t\t\t\t\t\t\t\treturn it[1] == item;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif (originalItem) {\n\t\t\t\t\t\t\t\t\tnewOpts.push(originalItem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tscope.options = newOpts;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (oldLen != scope.options.length) {\n\t\t\t\t\t\t\t//#todo: should resize scroll or scroll up here\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tscope.clearSearch = function () {\n\t\t\t\t\tscope.ui.searchValue = '';\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tscope.copyOpt = function (option) {\n\t\t\t\treturn angular.copy(option);\n\t\t\t};\n\n\t\t\t//#TODO ?: WRAP INTO $timeout?\n\t\t\tngModelController.$render();\n\t\t}\n\t};\n}\n\n\n// WEBPACK FOOTER //\n// ./src/ionic-modal-select.js","/*!\r\n * Copyright 2015 Inmagik SRL.\r\n * http://www.inmagik.com/\r\n *\r\n * ionic-modal-select, v1.3.2\r\n * Modal select directive for Ionic framework.\r\n *\r\n * By @bianchimro\r\n *\r\n * Licensed under the MIT license. Please see LICENSE for more information.\r\n *\r\n */\r\n\r\nangular.module('ionic-modal-select', [])\r\n.directive('compile', compile)\r\n.directive('modalSelect', modalSelect);\r\n\r\n\r\nfunction compile($compile) {\r\n\treturn function(scope, iElement, iAttrs) {\r\n\t\tvar x = scope.$watch(\r\n\t\t\tfunction(scope) {\r\n\t\t\t\t// watch the 'compile' expression for changes\r\n\t\t\t\treturn scope.$eval(iAttrs.compile);\r\n\t\t\t},\r\n\t\t\tfunction(value) {\r\n\t\t\t\t// when the 'compile' expression changes\r\n\t\t\t\t// assign it into the current DOM\r\n\t\t\t\tiElement.html(value);\r\n\r\n\t\t\t\t// compile the new DOM and link it to the current\r\n\t\t\t\t// scope.\r\n\t\t\t\t// NOTE: we only compile .childNodes so that\r\n\t\t\t\t// we don't get into infinite loop compiling ourselves\r\n\t\t\t\t$compile(iElement.contents())(scope);\r\n\r\n\t\t\t\t//deactivate watch if \"compile-once\" is set to \"true\"\r\n\t\t\t\tif (iAttrs.compileOnce === 'true') {\r\n\t\t\t\t\tx();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n}\r\n\r\n\r\nfunction modalSelect($ionicModal, $timeout, $filter, $parse, $templateCache ) {\r\n\r\n\t\tconst modalTemplateMultiple = require('raw!./modal-template-multiple.html');\r\n\t\tconst modalTemplate = require('raw!./modal-template.html');\r\n\r\n\t\treturn {\r\n\t\t\trestrict: 'A',\r\n\t\t\trequire : 'ngModel',\r\n\t\t\tscope: {\r\n\t\t\t\tinitialOptions:\"=options\",\r\n\t\t\t\toptionGetter:\"&\",\r\n\t\t\t\tsearchFilters: \"=searchFilters\",\r\n\t\t\t\tsearchProperties:'=',\r\n\t\t\t\tonSelect: \"&\",\r\n\t\t\t\tonSearch: \"&\",\r\n\t\t\t\tonReset: \"&\",\r\n\t\t\t\tonClose: \"&\",\r\n\t\t\t},\r\n\t\t\tlink: function (scope, iElement, iAttrs, ngModelController, transclude) {\r\n\r\n\t\t\t\tvar shortList = true;\r\n\t\t\t\tvar shortListBreak = iAttrs.shortListBreak ? parseInt(iAttrs.shortListBreak) : 10;\r\n\t\t\t\tvar setFromProperty= iAttrs.optionProperty;\r\n\t\t\t\tvar onOptionSelect = iAttrs.optionGetter;\r\n\t\t\t\tvar clearSearchOnSelect = iAttrs.clearSearchOnSelect !== \"false\" ? true : false;\r\n\t\t\t\tvar searchProperties = scope.searchProperties  ? scope.searchProperties : false;\r\n\r\n\r\n\t\t\t\t//multiple values settings.\r\n\t\t\t\tvar multiple = iAttrs.multiple  ? true : false;\r\n\t\t\t\tif (multiple) {\r\n\t\t\t\t\t\tscope.isChecked = {};\r\n\t\t\t\t}\r\n\t\t\t\tvar multipleNullValue = iAttrs.multipleNullValue ? scope.$eval(iAttrs.multipleNullValue) : [];\r\n\r\n\t\t\t\tfunction checkSelectedMultipleOptions(){\r\n                    if(multiple){\r\n                        scope.initialOptions.forEach(function(o){\r\n                            if(typeof scope.isChecked[o[setFromProperty]] === 'undefined' && o.selected){\r\n                                scope.isChecked[o[setFromProperty]] = true;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n\r\n\t\t\t\tscope.ui = {\r\n\t\t\t\t\tmodalTitle : iAttrs.modalTitle || 'Select an option',\r\n\t\t\t\t\tokButton : iAttrs.okButton || 'OK',\r\n\t\t\t\t\thideReset : iAttrs.hideReset  !== \"true\" ? false : true,\r\n\t\t\t\t\tresetButton : iAttrs.resetButton || 'Reset',\r\n\t\t\t\t\tcancelButton : iAttrs.cancelButton || 'Cancel',\r\n\t\t\t\t\tloadListMessage : iAttrs.loadListMessage || 'Loading',\r\n\t\t\t\t\tmodalClass : iAttrs.modalClass || '',\r\n\t\t\t\t\theaderFooterClass : iAttrs.headerFooterClass || 'bar-stable',\r\n\t\t\t\t\tvalue  : null,\r\n\t\t\t\t\tselectedClass : iAttrs.selectedClass || 'option-selected',\r\n\t\t\t\t\titemClass: iAttrs.itemClass || 'item item-text-wrap',\r\n\t\t\t\t\tsearchTemplate: iAttrs.searchTemplate || (multiple ? modalTemplateMultiple : modalTemplate),\r\n\r\n\t\t\t\t\t//search stuff\r\n\t\t\t\t\thasSearch : iAttrs.hasSearch  !== \"true\" ? false : true,\r\n\t\t\t\t\tsearchValue : '',\r\n\t\t\t\t\tsearchPlaceholder : iAttrs.searchPlaceholder || 'Search',\r\n\t\t\t\t\tsubHeaderClass : iAttrs.subHeaderClass || 'bar-stable',\r\n\t\t\t\t\tcancelSearchButton : iAttrs.cancelSearchButton || 'Clear'\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar allOptions = [];\r\n\t\t\t\tscope.options = [];\r\n\r\n\t\t\t\tif (iAttrs.optionsExpression) {\r\n\t\t\t\t\t\tvar optionsExpression = iAttrs.optionsExpression;\r\n\t\t\t\t\t\tvar match = optionsExpression.match(/^\\s*([\\s\\S]+?)\\s+in\\s+([\\s\\S]+?)(?:\\s+track\\s+by\\s+([\\s\\S]+?))?\\s*$/);\r\n\t\t\t\t\t\tif (!match) {\r\n\t\t\t\t\t\t\t\tthrow new Error(\"collection-repeat expected expression in form of '_item_ in \" +\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"_collection_[ track by _id_]' but got '\" + iAttrs.optionsExpression + \"'.\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t//var keyExpr = match[1];\r\n\t\t\t\t\t\tvar listExpr = match[2];\r\n\t\t\t\t\t\tvar listGetter = $parse(listExpr);\r\n\t\t\t\t\t\tvar s = iElement.scope();\r\n\r\n\t\t\t\t\t\tscope.$watch(\r\n\t\t\t\t\t\t\t\t() => {\r\n\t\t\t\t\t\t\t\t\t\treturn listGetter(s);\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t(nv, ov) => {\r\n\t\t\t\t\t\t\t\t\t\tinitialOptionsSetup(nv);\r\n\t\t\t\t\t\t\t\t\t\tupdateListMode();\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\ttrue\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\t\tscope.$watchCollection('initialOptions', function(nv){\r\n\t\t\t\t\t\t\t\tinitialOptionsSetup(nv);\r\n\t\t\t\t\t\t\t\tupdateListMode();\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//#TODO: this is due to different single vs multiple template\r\n\t\t\t\t//but adds lots of complexity here and in search\r\n\t\t\t\tfunction initialOptionsSetup(nv){\r\n\t\t\t\t\t\tnv = nv || [];\r\n\t\t\t\t\t\tif ( !multiple ) {\r\n\t\t\t\t\t\t\t\tallOptions = angular.copy(nv);\r\n\t\t\t\t\t\t\t\tscope.options = angular.copy(nv);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tallOptions = nv.map((item, idx) => [idx, angular.copy(item)] );\r\n\t\t\t\t\t\t\t\tscope.options = angular.copy(allOptions);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// getting options template\r\n\t\t\t\tvar opt = iElement[0].querySelector('.option');\r\n\t\t\t\tif (!opt) {\r\n\t\t\t\t\tthrow new Error({\r\n\t\t\t\t\t\tname:'modalSelectError:noOptionTemplate',\r\n\t\t\t\t\t\tmessage:`When using modalSelect directive you must include an element with class \"option\"\r\n\t\t\t\t\t\t to provide a template for your select options.`,\r\n\t\t\t\t\t\ttoString:function(){\r\n\t\t\t\t\t\t\treturn this.name + \" \" + this.message;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\tscope.inner = angular.element(opt).html();\r\n\r\n\t\t\t\t//add support for .remove for older devices\r\n\t\t\t\tif (!('remove' in Element.prototype)) {\r\n\t\t\t\t\tElement.prototype.remove = function() {\r\n\t\t\t\t\t\tthis.parentNode.removeChild(this);\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tangular.element(opt).remove();\r\n\r\n\t\t\t\tvar notFound = iElement[0].querySelector('.not-found');\r\n\t\t\t\tif(notFound) {\r\n\t\t\t\t\tscope.notFound = angular.element(notFound).html();\r\n\t\t\t\t\tangular.element(notFound).remove();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfunction updateListMode(){\r\n\t\t\t\t\t//shortList controls wether using ng-repeat instead of collection-repeat\r\n\t\t\t\t\tif (iAttrs.useCollectionRepeat === \"true\") {\r\n\t\t\t\t\t\tshortList = false;\r\n\t\t\t\t\t} else if (iAttrs.useCollectionRepeat === \"false\") {\r\n\t\t\t\t\t\tshortList = true;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (typeof(scope.options) !==\"undefined\"){\r\n\t\t\t\t\t\t\tshortList = !!(scope.options.length < shortListBreak);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tscope.ui.shortList = shortList;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tngModelController.$render = function(){\r\n\t\t\t\t\tscope.ui.value = ngModelController.$viewValue;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tvar getSelectedValue = scope.getSelectedValue = function(option){\r\n\t\t\t\t\tvar val = null;\r\n\t\t\t\t\tif (option === null || option === undefined) {\r\n\t\t\t\t\t\treturn option;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (onOptionSelect) {\r\n\t\t\t\t\t\treturn scope.optionGetter({option:option});\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (setFromProperty) {\r\n\t\t\t\t\t\tval = option[setFromProperty];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tval = option;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn val;\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.setOption = function(option){\r\n\t\t\t\t\tvar oldValue = ngModelController.$viewValue;\r\n\t\t\t\t\tvar val = getSelectedValue(option);\r\n\t\t\t\t\tngModelController.$setViewValue(val);\r\n\t\t\t\t\tngModelController.$render();\r\n\r\n\t\t\t\t\tif (scope.onSelect) {\r\n\t\t\t\t\t\tscope.onSelect({ newValue: val, oldValue: oldValue });\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.modal.hide().then(function(){\r\n\t\t\t\t\t\tscope.showList = false;\r\n\t\t\t\t\t\tif (scope.ui.hasSearch) {\r\n\t\t\t\t\t\t\tif(clearSearchOnSelect) {\r\n\t\t\t\t\t\t\t\tscope.ui.searchValue = '';\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\t// Filter object {id: <filterId>, active: <boolean>}\r\n\t\t\t\t// Used as auxiliary query params when querying server for search results\r\n\t\t\t\tscope.setFilter = function(filterId) {\r\n\t\t\t\t\tangular.forEach(scope.searchFilters, function(filter) {\r\n\t\t\t\t\t\tif(filter.id == filterId) {\r\n\t\t\t\t\t\t\tfilter.active = !filter.active;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tfilter.active = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\t// Trigger another search when the search filters change\r\n\t\t\t\t\tif(scope.onSearch) {\r\n\t\t\t\t\t\tscope.onSearch({query: scope.ui.searchValue});\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.unsetValue = function(){\r\n\t\t\t\t\t$timeout(function(){\r\n\t\t\t\t\t\tngModelController.$setViewValue(\"\");\r\n\t\t\t\t\t\tngModelController.$render();\r\n\t\t\t\t\t\tscope.modal.hide();\r\n\t\t\t\t\t\tscope.showList = false;\r\n\t\t\t\t\t\tif (scope.onReset && angular.isFunction(scope.onReset)) {\r\n\t\t\t\t\t\t\tscope.onReset();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.setValues = function(){\r\n\t\t\t\t\t\tvar checkedItems = [];\r\n\t\t\t\t\t\tangular.forEach(scope.isChecked, function(v, k){\r\n\t\t\t\t\t\t\t\tif(v){\r\n\t\t\t\t\t\t\t\t\t\tcheckedItems.push(allOptions[k][1])\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tvar oldValues = ngModelController.$viewValue;\r\n\t\t\t\t\t\tvar vals = checkedItems.map(function(item){\r\n\t\t\t\t\t\t\t\treturn getSelectedValue(item);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tngModelController.$setViewValue(vals);\r\n\t\t\t\t\t\tngModelController.$render();\r\n\r\n\t\t\t\t\t\tif (scope.onSelect) {\r\n\t\t\t\t\t\t\t\tscope.onSelect({ newValue: vals, oldValue: oldValues });\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tscope.modal.hide().then(function(){\r\n\t\t\t\t\t\t\t\tscope.showList = false;\r\n\t\t\t\t\t\t\t\tif (scope.ui.hasSearch) {\r\n\t\t\t\t\t\t\t\t\t if(clearSearchOnSelect){\r\n\t\t\t\t\t\t\t\t\t\t\t\tscope.ui.searchValue = '';\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.unsetValues = function(){\r\n\t\t\t\t\t\t$timeout(function(){\r\n\t\t\t\t\t\t\t\tngModelController.$setViewValue(multipleNullValue);\r\n\t\t\t\t\t\t\t\tngModelController.$render();\r\n\t\t\t\t\t\t\t\tscope.isChecked = {};\r\n\t\t\t\t\t\t\t\tscope.modal.hide();\r\n\t\t\t\t\t\t\t\tscope.showList = false;\r\n\t\t\t\t\t\t\t\tif (scope.onReset && angular.isFunction(scope.onReset)) {\r\n\t\t\t\t\t\t\t\t\t\tscope.onReset();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\t\t\t\tscope.closeModal = function(){\r\n\t\t\t\t\tscope.modal.hide().then(function(){\r\n\t\t\t\t\t\tscope.showList = false;\r\n\t\t\t\t\t});\r\n\t\t\t\t};\r\n\r\n\r\n\t\t\t\tscope.compareValues = function(a, b){\r\n\t\t\t\t\treturn angular.equals(a, b);\r\n\t\t\t\t};\r\n\r\n\t\t\t\t//loading the modal\r\n\t\t\t\tvar modalTpl = null;\r\n\t\t\t\tif(iAttrs.searchTemplate) {\r\n\t\t\t\t\tscope.modal = $ionicModal.fromTemplate(\r\n\t\t\t\t\t\t$templateCache.get(iAttrs.searchTemplate),\r\n\t\t\t\t\t\t{ scope: scope }\r\n\t\t\t\t\t);\r\n\t\t\t\t} else {\r\n\t\t\t\t\tmodalTpl = multiple ? modalTemplateMultiple : modalTemplate;\r\n\t\t\t\t\tscope.modal = $ionicModal.fromTemplate(\r\n\t\t\t\t\t\tmodalTpl,\r\n\t\t\t\t\t\t{ scope: scope }\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet hiddenCb = null;\r\n\t\t\t\tscope.$on('$destroy', function(){\r\n\t\t\t\t\tif(hiddenCb){\r\n\t\t\t\t\t\t\thiddenCb();\r\n\t\t\t\t\t\t\thiddenCb = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tscope.modal.remove();\r\n\t\t\t\t});\r\n\r\n\t\t\t\tif (scope.onClose && angular.isFunction(scope.onClose)) {\r\n\t\t\t\t\thiddenCb = scope.$on('modal.hidden', function(){\r\n\t\t\t\t\t\tscope.onClose();\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\r\n\t\t\t\tiElement.on('click', function(){\r\n\t\t\t\t\tif (shortList) {\r\n\t\t\t\t\t\tscope.showList = true;\r\n\t\t\t\t\t\tscope.modal.show();\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tscope.modal.show()\r\n\t\t\t\t\t\t\t.then(function(){\r\n\t\t\t\t\t\t\t\tscope.showList = true;\r\n\t\t\t\t\t\t\t\tscope.ui.shortList = shortList;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n                    checkSelectedMultipleOptions();\r\n\t\t\t\t});\r\n\r\n\r\n\t\t\t\t//filter function\r\n\t\t\t\tif (scope.ui.hasSearch) {\r\n\t\t\t\t\tscope.$watch('ui.searchValue', function(nv){\r\n\t\t\t\t\t\tvar whatToSearch;\r\n\t\t\t\t\t\tif ( !multiple  ) {\r\n\t\t\t\t\t\t\t\twhatToSearch = allOptions;\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\twhatToSearch = allOptions.map(function(item){\r\n\t\t\t\t\t\t\t\t\t\treturn item[1];\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tif(iAttrs.onSearch) {\r\n\t\t\t\t\t\t\t\tscope.onSearch({query: nv});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tvar filteredOpts = $filter('filter')(whatToSearch, nv, function(actual, expected) {\r\n\t\t\t\t\t\t\t\tif(!actual){\r\n\t\t\t\t\t\t\t\t\t// if actual is an empty string, empty object, null, or undefined\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif (searchProperties){\r\n\t\t\t\t\t\t\t\t\tif (typeof actual == 'object'){\r\n\t\t\t\t\t\t\t\t\t\tfor (var i = 0; i < searchProperties.length; i++){\r\n\t\t\t\t\t\t\t\t\t\t\tif (actual[searchProperties[i]] && actual[searchProperties[i]].toLowerCase().indexOf(expected.toLowerCase()) >= 0){\r\n\t\t\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tif(actual.toString().toLowerCase().indexOf(expected.toLowerCase()) >= 0){\r\n\t\t\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\t\tvar oldLen = scope.options.length;\r\n\t\t\t\t\t\t\tif ( !multiple ){\r\n\t\t\t\t\t\t\t\t\tscope.options = filteredOpts;\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\t//#TODO: lots of loops here!\r\n\t\t\t\t\t\t\t\t\tvar newOpts = [];\r\n\t\t\t\t\t\t\t\t\tangular.forEach(filteredOpts, function(item){\r\n\t\t\t\t\t\t\t\t\t\t\tvar originalItem = allOptions.find(function(it){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn it[1] == item;\r\n\t\t\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\t\t\tif( originalItem ){\r\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewOpts.push(originalItem);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\t\tscope.options = newOpts;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif(oldLen != scope.options.length){\r\n\t\t\t\t\t\t\t\t//#todo: should resize scroll or scroll up here\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t\tscope.clearSearch = function(){\r\n\t\t\t\t\t\tscope.ui.searchValue = '';\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\r\n\t\t\t\tscope.copyOpt = option => {\r\n\t\t\t\t\treturn angular.copy(option);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//#TODO ?: WRAP INTO $timeout?\r\n\t\t\t\tngModelController.$render();\r\n\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/ionic-modal-select.js","module.exports = \" <ion-modal-view class=\\\"ionic-select-modal\\\" ng-class=\\\"::ui.modalClass\\\">\\r\\n\\r\\n    <ion-header-bar ng-class=\\\"::ui.headerFooterClass\\\">\\r\\n      <h1 class=\\\"title\\\">{{::ui.modalTitle}}</h1>\\r\\n    </ion-header-bar>\\r\\n\\r\\n    <div class=\\\"bar bar-subheader item-input-inset\\\" ng-class=\\\"::ui.subHeaderClass\\\" ng-if=\\\"ui.hasSearch\\\">\\r\\n      <label class=\\\"item-input-wrapper\\\">\\r\\n        <i class=\\\"icon ion-ios-search placeholder-icon\\\"></i>\\r\\n        <input type=\\\"search\\\" placeholder=\\\"{{::ui.searchPlaceholder}}\\\" ng-model=\\\"ui.searchValue\\\">\\r\\n      </label>\\r\\n      <button type=\\\"button\\\" class=\\\"button button-clear\\\" ng-click=\\\"clearSearch()\\\">\\r\\n        {{ ui.cancelSearchButton }}\\r\\n      </button>\\r\\n    </div>\\r\\n\\r\\n    <ion-content class=\\\"has-header\\\" ng-class=\\\"{'has-subheader':ui.hasSearch}\\\">\\r\\n    <div class=\\\"text-center\\\" ng-if=\\\"!ui.shortList && !showList\\\" style=\\\"padding-top:40px;\\\">\\r\\n        <h4 class=\\\"muted\\\">{{::ui.loadListMessage}}</h4>\\r\\n        <p>\\r\\n            <ion-spinner></ion-spinner>\\r\\n        </p>\\r\\n    </div>\\r\\n\\r\\n    <div ng-if=\\\"showList\\\">\\r\\n        <!--collection-repeat mode -->\\r\\n        <!-- not working right now -->\\r\\n        <!--\\r\\n        <div ng-if=\\\"!ui.shortList\\\" >\\r\\n            <div class=\\\"list\\\" class=\\\"animate-if\\\" >\\r\\n                <div\\r\\n                    class=\\\"item item-checkbox\\\" ng-class=\\\"ui.itemClass\\\"\\r\\n                     collection-repeat=\\\"optionm in options track by $index\\\">\\r\\n                    <label class=\\\"checkbox\\\">\\r\\n                        <input type=\\\"checkbox\\\" ng-model=\\\"isChecked[optionm[0]]\\\">\\r\\n                    </label>\\r\\n\\r\\n                    <div compile=\\\"inner\\\" ng-init=\\\"option=optionm[1]\\\" compile-once=\\\"false\\\"></div>\\r\\n\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        -->\\r\\n\\r\\n        <!-- ng-repeat mode -->\\r\\n        <div ng-if=\\\"ui.shortList || true\\\">\\r\\n            <div class=\\\"list\\\">\\r\\n                <div\\r\\n                  class=\\\"item item-checkbox\\\" ng-class=\\\"ui.itemClass\\\"\\r\\n                  ng-repeat=\\\"optionm in options track by optionm[0]\\\">\\r\\n                    <label class=\\\"checkbox\\\">\\r\\n                        <input type=\\\"checkbox\\\" ng-model=\\\"isChecked[optionm[0]]\\\">\\r\\n                    </label>\\r\\n                    <div ng-init=\\\"option=optionm[1]\\\" compile=\\\"inner\\\" compile-once=\\\"true\\\"></div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    </ion-content>\\r\\n    <ion-footer-bar ng-class=\\\"::ui.headerFooterClass\\\">\\r\\n        <button class=\\\"button button-stable\\\" ng-click=\\\"closeModal()\\\">{{ui.cancelButton}}</button>\\r\\n        <div class=\\\"title\\\" style=\\\"padding-top:6px\\\">\\r\\n            <button class=\\\"button button-navbar\\\" ng-click=\\\"setValues()\\\">OK</button>\\r\\n        </div>\\r\\n        <button ng-if=\\\"::!ui.hideReset\\\" class=\\\"button button-stable\\\" ng-click=\\\"unsetValues()\\\">{{ui.resetButton}}</button>\\r\\n    </ion-footer-bar>\\r\\n</ion-modal-view>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./src/modal-template-multiple.html\n// module id = 2\n// module chunks = 0","module.exports = \" <ion-modal-view class=\\\"ionic-select-modal\\\" ng-class=\\\"::ui.modalClass\\\">\\r\\n\\r\\n    <ion-header-bar ng-class=\\\"::ui.headerFooterClass\\\">\\r\\n      <h1 class=\\\"title\\\">{{::ui.modalTitle}}</h1>\\r\\n    </ion-header-bar>\\r\\n\\r\\n    <div class=\\\"bar bar-subheader item-input-inset\\\" ng-class=\\\"::ui.subHeaderClass\\\" ng-if=\\\"ui.hasSearch\\\">\\r\\n      <label class=\\\"item-input-wrapper\\\">\\r\\n        <i class=\\\"icon ion-ios-search placeholder-icon\\\"></i>\\r\\n        <input type=\\\"search\\\" placeholder=\\\"{{::ui.searchPlaceholder}}\\\" ng-model=\\\"ui.searchValue\\\">\\r\\n      </label>\\r\\n      <button type=\\\"button\\\" class=\\\"button button-clear\\\" ng-click=\\\"clearSearch()\\\">\\r\\n        {{ ui.cancelSearchButton }}\\r\\n      </button>\\r\\n    </div>\\r\\n\\r\\n    <ion-content class=\\\"has-header\\\" ng-class=\\\"{'has-subheader':ui.hasSearch}\\\">\\r\\n        <div class=\\\"text-center\\\" ng-if=\\\"!ui.shortList && !showList\\\" style=\\\"padding-top:40px;\\\">\\r\\n            <h4 class=\\\"muted\\\">{{::ui.loadListMessage}}</h4>\\r\\n            <p>\\r\\n                <ion-spinner></ion-spinner>\\r\\n            </p>\\r\\n        </div>\\r\\n        <div ng-if=\\\"showList\\\">\\r\\n            <div ng-if=\\\"!ui.shortList\\\">\\r\\n                <div class=\\\"list\\\" ng-if=\\\"showList\\\" class=\\\"animate-if\\\">\\r\\n                    <div\\r\\n                      ng-class=\\\"{ '{{::ui.itemClass}}' : true, '{{::ui.selectedClass}}': compareValues(getSelectedValue(option), ui.value) }\\\"\\r\\n                      collection-repeat=\\\"option in options track by $index\\\"\\r\\n                      ng-click=\\\"setOption(option)\\\"\\r\\n                      ng-class=\\\"{'{{::ui.selectedClass}}': compareValues(getSelectedValue(option), ui.value) }\\\">\\r\\n                        <div compile=\\\"inner\\\" compile-once=\\\"true\\\"></div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div ng-if=\\\"ui.shortList\\\">\\r\\n                <div class=\\\"list\\\">\\r\\n                    <div\\r\\n                      ng-repeat=\\\"option in options track by $index\\\"\\r\\n                      ng-click=\\\"setOption(option)\\\"\\r\\n                      ng-class=\\\"{ '{{::ui.itemClass}}' : true, '{{::ui.selectedClass}}': compareValues(getSelectedValue(option), ui.value) }\\\">\\r\\n                        <div compile=\\\"inner\\\" compile-once=\\\"true\\\"></div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div ng-if=\\\"notFound && options.length == 0\\\">\\r\\n            <div compile=\\\"notFound\\\" compile-once=\\\"true\\\" ng-click=\\\"closeModal()\\\"></div>\\r\\n        </div>\\r\\n\\r\\n    </ion-content>\\r\\n\\r\\n    <ion-footer-bar ng-class=\\\"::ui.headerFooterClass\\\">\\r\\n        <button type=\\\"button\\\" class=\\\"button button-stable modal-select-close-button\\\" ng-click=\\\"closeModal()\\\">{{ui.cancelButton}}</button>\\r\\n        <button type=\\\"button\\\" ng-if=\\\"::!ui.hideReset\\\" class=\\\"button button-stable\\\" ng-click=\\\"unsetValue()\\\">{{ui.resetButton}}</button>\\r\\n    </ion-footer-bar>\\r\\n\\r\\n</ion-modal-view>\\r\\n\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/raw-loader!./src/modal-template.html\n// module id = 3\n// module chunks = 0"],"sourceRoot":""}